The ''2-matrix_divided'' module
===============================

Usage
-----

Importing the function:
	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

test passing None as matrix:
	 >>> matrix_divided(None, 1)
	 Traceback (most recent call last):
         ...
         TypeError: matrix must be a matrix (list of lists) of integers/floats

test passing None as div:
	 >>> matrix_divided([[1, 2, 3], [4, 5, 6]], None)
	 Traceback (most recent call last):
         ...
	 TypeError: div must be a number

Test happy path:
    >>> matrix_divided([[6, 10, 4], [2, 1, 3]], 2)
    [[3.0, 5.0, 2.0], [1.0, 0.5, 1.5]]

Test one el:
    >>> matrix_divided([[6]], 6)
    [[1.0]]

Test division by negative:
    >>> matrix_divided([[6, 10, 4], [2, 1, 3]], -2)
    [[-3.0, -5.0, -2.0], [-1.0, -0.5, -1.5]]

Test empty matrix with div:
    >>> matrix_divided([[]], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test matrix with string elem
    >>> matrix_divided([[2, "elem", 8], [15, 10, 4]], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test matrix with different size
    >>> matrix_divided([[2, 6, 3], [1, 3, 6, 8]], 2)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

Test no  arg:
    >>> matrix_divided()
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
